  plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.graalvm.buildtools.native' version '0.10.2'
    id 'org.cyclonedx.bom' version '1.8.2'
    id 'io.spring.javaformat' version '0.0.41'
    id "io.spring.nohttp" version "0.0.11"
    id 'com.google.cloud.tools.jib' version '3.4.3'
  }

  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.javaformat'

  gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

  group = 'org.springframework.samples'
  version = '10.10.10'

  java {
    sourceCompatibility = JavaVersion.VERSION_17
  }

  repositories {
    mavenCentral()
  }

  configurations {
    agent
    compileOnly {
      extendsFrom annotationProcessor
    }
  }

  ext.webjarsFontawesomeVersion = "4.7.0"
  ext.webjarsBootstrapVersion = "5.3.3"

  dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    agent 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.cache:cache-api'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
    runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.postgresql:postgresql'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-docker-compose'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.41'
    checkstyle 'com.puppycrawl.tools:checkstyle:10.16.0'
  }

  tasks.named('test') {
    useJUnitPlatform()
  }

  checkstyle {
    configDirectory = project.file('src/checkstyle')
    configFile = file('src/checkstyle/nohttp-checkstyle.xml')
  }

  checkstyleNohttp {
    configDirectory = project.file('src/checkstyle')
    configFile = file('src/checkstyle/nohttp-checkstyle.xml')
  }

  tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
  tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

  tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
  tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

  checkstyleAot.enabled = false
  checkstyleAotTest.enabled = false

  checkFormatAot.enabled = false
  checkFormatAotTest.enabled = false

  formatAot.enabled = false
  formatAotTest.enabled = false



  task copyAgent(type: Copy) {
    from configurations.agent {
      rename "opentelemetry-javaagent-.*\\.jar", "opentelemetry-javaagent.jar"
    }
    into layout.buildDirectory.dir("agent")
  }

  bootJar {
    dependsOn copyAgent

    archiveFileName = "petclinic.jar"
  }

    jib {
      // https://hub.docker.com/_/amazoncorretto
//	from.image = 'amazoncorretto:17.0.9-alpine'

      // https://console.cloud.google.com/gcr/images/distroless/GLOBAL
      from {
        image = 'gcr.io/distroless/java17-debian12'
        platforms {
          platform {
            architecture = 'amd64'
            os = 'linux'
          }
        }
      }

      extraDirectories {
        paths {
          path {
            from = layout.buildDirectory.dir("agent")
            into = '/otelagent'
          }

        }
      }

      container {
        jvmFlags = [
          '-javaagent:/otelagent/opentelemetry-javaagent.jar'
        ]
      }
    }

    tasks.named('jibDockerBuild').configure {
      dependsOn copyAgent
    }
